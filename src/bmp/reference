import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.*;
public class Test{
    public static void main(String args[]) {
        File file = new File("TRAIN/1/3.bmp");
        BufferedImage bi=null;
        try{
            bi = ImageIO.read(file);
        }catch(Exception e){
            e.printStackTrace();
        }

        if (bi == null) {
            System.out.println("Error");
        }

        int width = 28;
        int height = 28;

        int[][] img = new int[height][width];

        for(int i = 0; i < height; i ++){
            for(int j = 0; j < width; j ++){
                //System.out.print(bi.getRGB(jw, ih));
                int pixel=bi.getRGB(i, j);
//                System.out.println("i="+i+",j="+j+":("+rgb[0]+","+rgb[1]+","+rgb[2]+")");
                if (pixel == -1) {
                    img[j][i] = '\0';
                } else {
                    img[j][i] = 1;
                }
            }
        }

        for(int i = 0;i < height; i ++){
            for(int j = 0;j < width; j ++){
                System.out.print(img[i][j]);
            }
            System.out.println();
        }
    }
}

 int[] hiddenArray = {};
        double rating = 0;
        if (sigmoidFunctionType == NeuronNode.SIGMOID_FUNCTION_TYPE.tanFunction) {
            hiddenArray = new int[2];
            hiddenArray[0] = 7;
            hiddenArray[1] = 7;
            rating = 0.134;
        } else {
            hiddenArray = new int[1];
            hiddenArray[0] = 9;
            rating = 3.5;
        }
        NeuronSystem sinSystem = new NeuronSystem(1, hiddenArray, 1, rating, sigmoidFunctionType);
        sinSystem.sinReset();
        // generate data
        ArrayList<DataNode> dataList = new ArrayList<>();
        double min = -Math.PI;
        double max = Math.PI;
        for (int i = 0; i < dataSize; i++) {
            double x = min + new Random().nextDouble() * (max - min);
            double y = Math.sin(x);
            double[] tempInput = {x};
            double[] tempOutput = new double[1];
            if (sigmoidFunctionType == NeuronNode.SIGMOID_FUNCTION_TYPE.logFunction) {
                tempOutput[0] = (y + 1) / 2;
            } else {
                tempOutput[0] = y;
            }
            DataNode tempNode = new DataNode(tempInput, tempOutput);
            dataList.add(tempNode);
        }
        // training
        for (int i = 0; i < trainingTimes; i++) {
            Collections.shuffle(dataList);
            for (int j = 0; j < dataSize; j++) {
                sinSystem.train(dataList.get(j).getInput(), dataList.get(j).getOutput());
            }
        }
        // verify
        double errorSum = 0;
        for (int i = 0; i < dataSize * 100; i++) {
            double x = min + new Random().nextDouble() * (max - min);
            double y = Math.sin(x);
            double[] tempInput = {x};
            double[] tempOutput = new double[1];
            if (sigmoidFunctionType == NeuronNode.SIGMOID_FUNCTION_TYPE.logFunction) {
                tempOutput[0] = (y + 1) / 2;
            } else {
                tempOutput[0] = y;
            }
            double[] tempPredict = sinSystem.predict(tempInput);
            for (int j = 0; j < tempOutput.length; j++) {
                errorSum += Math.abs(tempPredict[j] - tempOutput[j]);
            }
        }
        System.out.printf("rating = %5f average predict error %10.7f \n", rating, (errorSum / dataSize) / 100);